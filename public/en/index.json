


[{"content":"\rHello #\rWorld !! #\rThis is bold text, and this is emphasized text.\n","date":"9 April 2024","externalUrl":null,"permalink":"/posts/hello-world/","section":"Posts","summary":"Hello #\rWorld !! #\rThis is bold text, and this is emphasized text.","title":"Hello World","type":"posts"},{"content":"","date":"9 April 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"25 January 2023","externalUrl":null,"permalink":"/unity/2d/","section":"Unities","summary":"","title":"","type":"unity"},{"content":"\r개요 #\r정말 오랜만에 2D프로젝트를 만들고있다. 무한 런게임을 제작중인데,\n공중 발판을 제작하던 중 생각해보니\n\u0026lsquo;캐릭터가 발판 아래에서 점프를하면 발판에 충돌하지 않고 위로 올라가야할텐데\u0026hellip;\u0026rsquo;\n라는 생각이 들어 찾아보게 되었고 해법을 정리한다.\n본문 #\r처음에는 이렇게 생각했다.\n1. 플레이어가 발 아래로 캐스팅을 쏴서 발판의 콜라이더를 온오프?\n2. 반대로 발판이 오버랩 검사를 해서 플레이어가 위에있을때만 콜라이더를 온?\n하지만 연산이 걱정되기도하고 워난 플랫폼 게임이라면 항상있는 소위말하는 국룰이니까 찾아보면 있을것같아서\n찾아봤다.\n검색어를 어떻게 해야할지 난감해서\n\u0026lsquo;unity 2d air platform\u0026rsquo;\n\u0026lsquo;unity 2d up platform\u0026rsquo;\n이런식으로 검색해봤는데 정답은\n\u0026ldquo;One-Way Platforms\u0026rdquo; 였다.\n더군다나 이 기능은 Unity에서 컴포넌트로 제공하고있다.\n플랫폼 이펙터 2D 공식 매뉴얼\n이 컴포넌트인데\n플랫폼에 콜라이더를 먼저 붙이고\n콜라이더에 Used By Effector 를 체크해준 후 이 컴포넌트를 붙이면 된다.\n물론 Use One Way 는 체크돼있어야 하지만 디폴트로 체크돼있다.\n이렇게만 하면 아래에서 위로갈때는 충돌이 일어나지않고\n위에서 아래로는 충돌이 일어나서 플랫폼위에 서있게된다!\n이렇게 쉽다니\u0026hellip;\n만약 플랫폼게임에서 흔한패턴인\n**\u0026ldquo;아래방향키를 누르면 내려오기\u0026rdquo;**를 구현할려면\n위 영상을 참고하면 될것같다.\n결론 #\rUnity에서 2D와 3D의 제일 큰 차이점은 개인적인 생각으론\n물리 시뮬레이션 쪽이다.\n왜냐하면 콜라이더 컴포넌트도 2D전용 따로,\n리지드바디도 따로,\n레이를 쏘려해도 Physics2D클래스로 따로 접근해야한다.\n그래서 3D를 주로한 나로서는 아직 잘 모르는 부분이 많은것같다.\n특히 Effector2D컴포넌트 시리즈는 찾아보니까\n종류도 굉장히 많고 기능도 훌륭하다.\n이 계기로 알게됐으니 나중에 Effector2D컴포넌트를 먼저 떠올릴 수 있을것 같다.\n","date":"25 January 2023","externalUrl":null,"permalink":"/unity/2d/unity2d-%EA%B3%B5%EC%A4%91-%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%9D%BC%EB%B0%A9%ED%86%B5%ED%96%89-%ED%94%8C%EB%9E%AB%ED%8F%BC-%EB%A7%8C%EB%93%A4%EA%B8%B0/","section":"Unities","summary":"개요 # 정말 오랜만에 2D프로젝트를 만들고있다. 무한 런게임을 제작","title":"(Unity2D) 공중 플랫폼(일방통행 플랫폼) 만들기","type":"unity"},{"content":"","date":"25 January 2023","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"#2D","type":"tags"},{"content":"","date":"25 January 2023","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"#Unity","type":"tags"},{"content":"","date":"25 January 2023","externalUrl":null,"permalink":"/unity/","section":"Unities","summary":"","title":"Unities","type":"unity"},{"content":"","date":"10 August 2020","externalUrl":null,"permalink":"/tags/config/","section":"Tags","summary":"","title":"Config","type":"tags"},{"content":"","date":"10 August 2020","externalUrl":null,"permalink":"/tags/docs/","section":"Tags","summary":"","title":"Docs","type":"tags"},{"content":"","date":"10 August 2020","externalUrl":null,"permalink":"/series/documentation/","section":"Series","summary":"","title":"Documentation","type":"series"},{"content":"","date":"10 August 2020","externalUrl":null,"permalink":"/tags/thumbnail/","section":"Tags","summary":"","title":"Thumbnail","type":"tags"},{"content":"\rThumbnails #\rBlowfish was enhanced in order to make it easy to add visual support to your posts. To do so, you just need to place an image file (almost all formats are supported but we recommend .png or .jpg) that starts with feature* inside your article\u0026rsquo;s main directory, as shown in the example below.\ncontent └── awesome_article ├── index.md └── featured.png This will tell Blowfish that this article has a feature image that can be used both as a thumbnail across your website as well as for oEmbed cards across social platforms.\nFolder Structure #\rIf you are using single .md files for your articles and have a file structure similar to this:\ncontent └── awesome_article.md You need to change it from a single Markdown file into a folder. Create a directory with the same name of the article, inside create a index.md file. You\u0026rsquo;ll get a structure similar to what\u0026rsquo;s below.\ncontent └── awesome_article └── index.md Hero Images #\rThumbnails will be used by default as hero images within each article. Use the global article.showHero or the front-matter parameter showHero to control this feature across the entire site or for each specific post. If you want to override the style of the hero image, you can create a file called hero.html in ./layouts/partials/ that will override the original partial from the theme.\n","date":"10 August 2020","externalUrl":null,"permalink":"/test/","section":"Thumbnails","summary":"Thumbnails #\rBlowfish was enhanced in order to make it easy to add visual support to your posts. To do so, you just need to place an image file (almost all formats are supported but we recommend .","title":"Thumbnails","type":"test"},{"content":"\r언리얼 게임 프레임웍 #\r게임 콘텐츠의 구조 #\r게임 제작을 위해 언리얼 엔진은 자체적으로 설계한 프레임웍을 제공함 이를 게임 플레이 프레임웍(Gameplay Framework)이라고 부름 언리얼 게임 프레임웍의 각 구성 요소를 파악하고, 이를 확장하면서 게임을 제작하는 것을 권장 1강 예제 게임 콘텐츠의 구성 #\r🔗이번 강의 준비물 이번 강의의 프로젝트는 아래 사진의 파란색 프레임웍 기능들을 사용함 월드(World) #\r게임 콘텐츠를 담기 위해 제공되는 가상의 공간 월드는 시간, 트랜스폼, 틱을 서비스로 제공한다 월드 세팅이라는 콘텐츠 제작을 위한 기본 환경 설정을 제공한다 월드의 기본 단위는 액터(Actor)로 정의되며, 액터 클래스는 언제나 접두사 A를 사용한다 [!note] 월드의 역할\n게임 콘텐츠를 담는 공간 (Transform 게임 콘텐츠의 진행 (Tick) 게임 흐름을 위한 시간 (Time) 기본 환경 설정 (World Setting) 월드의 단위 구성 요소 (Actor) 게임모드(Game Mode) #\r게임 규칙을 지정하고 게임을 판정하는 최고 관리자 액터. → 형태가 없다. 언리얼 엔진에서 하나의 게임에는 반드시 하나의 게임 모드만 존재한다. 게임 모드에서 입장할 사용자의 규격을 지정할 수 있음. 멀티 플레이어 게임에서 판정을 처리하는 절대적 권위의 심판 [!note] 게임 모드의 역할\n플레이어 입장 관리 게임의 최종 승패 관리 게임의 규칙 관리 게임 데이터 검증 (멀티플레이 게임) 기믹(Gimmick) #\r게임 진행을 위한 이벤트를 발생시키는 사물 액터 주로 이벤트 발생을 위한 충돌 영역을 설정하는데, 이를 트리거(Trigger)라고 한다. 트리거를 통해 캐릭터와 상호 작용하고, 월드에 액터를 스폰해 콘텐츠를 전개한다. [!note] 기믹의 역할\n월드 내 사물과 상호작용을 수행 지정된 조건을 만족하면 이벤트를 발생 월드에 물체를 스폰(Spawn시킬 수 있음 플레이어(Player) #\r게임에 입장한 사용자 액터 → 형태가 없다. 게임 모드의 로그인을 통해 사용자가 게임 월드에 입장하면 플레이어가 생성된다. 싱글 플레이 게임에는 0번 플레이어가 설정된다. 사용자와의 최종 커뮤니케이션을 담당한다 (예) 입력장치의 해석, 화면 장치로의 출력) [!note] 플레이어의 역할\n게임에 입장한 사용자와의 1:1 대응 사용자의 현재 상태 및 데이터를 관리 사용자 입력의 1차 처리 (필요시) 사용자 화면에 대응하는 카메라 관리 사용자 화면에 나타나는 HUD UI 관리 폰(Pawn) #\r무형의 액터인 플레이어가 빙의해 조종하는 액터 길찾기를 사용할 수 있으며, 기믹 및 다른 폰과 상호작용한다. 폰 중에서 인간형 폰을 별도로 캐릭터라고 지칭한다. [!note] 폰의 역할 빙의(Process)를 통해 플레이어와 연결 사용자 입력의 실제 처리 사용자 화면에 대응되는 카메라 설정 기믹과의 상호작용 현재 상태에 적합한 애니메이션 재생\n최종 예제에서 확장할 내용 #\r가급적 블루프린트를 사용하지 않고 C++로만 제작 이후에 블루프린트로 확장 가능 기본 템플릿을 사용하지 않고 직접 제작 두 가지의 카메라 모드를 제공 (숄더뷰, 탑뷰) 액션 입력을 통한 콤보 공격의 구현 아이템 에셋을 활용한 무기 상자의 구현 NPC레벨 정보를 스프레드시트로 관리 플레이어와 전투하는 NPC인공지능의 구현 UI 연동과 게임 마무리 프로젝트 소스코드 폴더 규칙 #\r게임플레이를 구성하는 요소별로 폴더를 제작해 관리 Game: 게임모드와 게임 설정에 관련된 클래스 ⇒ 이번 강의에서 생성 Gimmick: 기믹 배경 물체에 관련된 클래스 Player: 플레이어에 관련된 클래스 ⇒ 이번 강의에서 생성 Input: 플레이어 입력에 관련된 클래스 Character: 기본 캐릭터와 PC 및 NPC에 관련된 클래스 ⇒ 이번 강의에서 생성 Action: 캐릭터 액션에 관련된 클래스 Item: 캐릭터 아이템에 관련된 클래스 Stat: 캐릭터 스탯에 관련된 클래스 AI: NPC 인공지능에 관련된 클래스 UI: UI에 관련된 클래스 Physics: 물리 충돌체 설정에 관련된 전처리기 Iterface: 인터페이스 클래스를 모아둔 폴더 클래스 생성 규칙 #\r모든 클래스는 AB(ArenaBattle의 약자)의 접두사로 시작함 폴더마다 다른폴더와의 의존성을 최소화 다른 폴더의 클래스에 접근할 때 가급적 인터페이스를 통해 접근 헤더 경로를 찾기 쉽도록 모듈.Build.cs파일에 모듈의 폴더를 인클루드 경로에 설정 PublicIncludePaths.AddRange(new string[] {\u0026quot;모듈이름\u0026quot;}); 추가 ==가급적이면 다른 폴더의 헤더를 직접 참조하지 않도록 구성하는것이 바람직==\n이번 강의에서 기억할 내용 #\r에디터 - 월드 구성 #\rPlayerStart액터를 월드에 갖다놓을때 Z축을 충분히 위로 끌어올려준 뒤 End키를 누르면 바닥에 딱 붙는다. 레벨에대한 디폴트 클래스들(게임모드, 디폴트 폰, HUD)을 지정하는 곳은 Outliner뷰에서 {레벨이름}(Editor)오브젝트를 우클릭 후 World Settings를 클릭하면 나오는 World Settings뷰에 있다. 에디터 - 클래스 구성 #\rGameModeBase를 상속받는 클래스를 만든 뒤 에디터 컴파일에서 에러가 나면 클래스 생성 규칙내용에 적은대로 모둘.build.cs파일에 PublicIncludePaths.AddRange(new string[] {\u0026quot;모듈이름\u0026quot;});을 추가주고 다시 컴파일하면 된다/ C++ 코드 #\r에셋의 주소로부터 클래스 타입을 참조할 때 Content Broswer뷰에서 에셋 우클릭→Copy Reference로 주소를 복사한 뒤 블루프린트라면 끝에 _C를 붙이고 이렇게 참조 static ConstructorHelpers::FClassFinder\u0026lt;APawn\u0026gt; ThirdPersonClassRef(TEXT(\u0026#34;/Game/ThirdPerson/Blueprints/BP_ThirdPersonCharacter.BP_ThirdPersonCharacter_C\u0026#34;)); 플레이 시작 시 마우스 포인터 숨기기 void AABPlayerController::BeginPlay() { Super::BeginPlay(); // 마우스 포인터 숨기기 FInputModeGameOnly GameOnlyInputMode; SetInputMode(GameOnlyInputMode); } ","date":"1 January 0001","externalUrl":null,"permalink":"/test/part2-1.%EC%96%B8%EB%A6%AC%EC%96%BC-%EC%97%94%EC%A7%84-%EA%B2%8C%EC%9E%84-%EC%A0%9C%EC%9E%91-%EA%B8%B0%EC%B4%88/","section":"Thumbnails","summary":"언리얼 게임 프레임웍 # 게임 콘텐츠의 구조 # 게임 제작을 위해 언리얼 엔","title":"[Part2] 1.언리얼 엔진 게임 제작 기초","type":"test"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/en/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/en/","section":"Blowfish","summary":"","title":"Blowfish","type":"page"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/en/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/en/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/en/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]